
# Copyright (C) 2006-2025 The ASysC project                        
#                                                                    
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or   
# any later version.                                                  
#                                                                    
# This program is distributed in the hope that it will be useful,     
# but WITHOUT ANY WARRANTY; without even the implied warranty of      
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the       
# GNU General Public License for more details.                        
#                                                                    
# You should have received a copy of the GNU General Public License   
# along with this program; If not, see <https://www.gnu.org/licenses/>

# This file was automatically generated by the ASysC compiler. Don't modify it.


import math
import circuit_base
from circuit_base import circuit_base, element

class circuit( circuit_base ):

	def __init__(self):
		super().__init__()
		self.NOT2_VCC = element('NOT2_VCC')
		self.NOT2_Iout = element('NOT2_Iout')
		self.NOT1_Iout = element('NOT1_Iout')
		self.V1_I = element('V1_I')
		self.C1_I = element('C1_I')
		self.R1_I = element('R1_I')
		self.C1_U = element('C1_U')
		self.NOT2_Uout = element('NOT2_Uout')
		self.NOT1_Uin = element('NOT1_Uin')
		self.R1_U = element('R1_U')
		self.NOT2_Uin = element('NOT2_Uin')
		self.NOT1_VCC = element('NOT1_VCC')
		self.NOT1_Uout = element('NOT1_Uout')
		self.V1_U = element('V1_U')

	def compute_t(self):
		self._setc(self.NOT2_VCC, ((1+1000*(1e-06*self._der1(self.C1_U)))*5)/(1000*(1e-06*self._der1(self.C1_U))+1))
		self._setc(self.NOT2_Iout, (((self._last(self.NOT1_Uin)<=self._last(self.NOT1_VCC)/2)*(1e-06*self._der1(self.C1_U))-(self._last(self.NOT2_Uin)<=self._last(self.NOT2_VCC)/2)*(1e-06*self._der1(self.C1_U)))*5+1e-06*self._der0(self.C1_U))/(1000*(1e-06*self._der1(self.C1_U))+1))
		self._setc(self.NOT1_Iout, -((((self._last(self.NOT1_Uin)<=self._last(self.NOT1_VCC)/2)*(1e-06*self._der1(self.C1_U))-(self._last(self.NOT2_Uin)<=self._last(self.NOT2_VCC)/2)*(1e-06*self._der1(self.C1_U)))*5+1e-06*self._der0(self.C1_U))/(1000*(1e-06*self._der1(self.C1_U))+1)))
		self._setc(self.V1_I, (((self._last(self.NOT2_Uin)<=self._last(self.NOT2_VCC)/2)*(1e-06*self._der1(self.C1_U))-(self._last(self.NOT1_Uin)<=self._last(self.NOT1_VCC)/2)*(1e-06*self._der1(self.C1_U))+(self._last(self.NOT1_Uin)<=self._last(self.NOT1_VCC)/2)*(1e-06*self._der1(self.C1_U))-(self._last(self.NOT2_Uin)<=self._last(self.NOT2_VCC)/2)*(1e-06*self._der1(self.C1_U)))*5)/(1000*(1e-06*self._der1(self.C1_U))+1))
		self._setc(self.C1_I, (1e-06*self._der0(self.C1_U)-((self._last(self.NOT2_Uin)<=self._last(self.NOT2_VCC)/2)*(1e-06*self._der1(self.C1_U))-(self._last(self.NOT1_Uin)<=self._last(self.NOT1_VCC)/2)*(1e-06*self._der1(self.C1_U)))*5)/(1000*(1e-06*self._der1(self.C1_U))+1))
		self._setc(self.R1_I, (((self._last(self.NOT1_Uin)<=self._last(self.NOT1_VCC)/2)*(1e-06*self._der1(self.C1_U))-(self._last(self.NOT2_Uin)<=self._last(self.NOT2_VCC)/2)*(1e-06*self._der1(self.C1_U)))*5+1e-06*self._der0(self.C1_U))/(1+(1e-06*self._der1(self.C1_U))*1000))
		self._setc(self.C1_U, -((((self._last(self.NOT2_Uin)<=self._last(self.NOT2_VCC)/2)-(self._last(self.NOT1_Uin)<=self._last(self.NOT1_VCC)/2))*5+1000*(1e-06*self._der0(self.C1_U)))/(1000*(1e-06*self._der1(self.C1_U))+1)))
		self._setc(self.NOT2_Uout, (((self._last(self.NOT2_Uin)<=self._last(self.NOT2_VCC)/2)+(self._last(self.NOT2_Uin)<=self._last(self.NOT2_VCC)/2)*(1000*(1e-06*self._der1(self.C1_U))))*5)/(1000*(1e-06*self._der1(self.C1_U))+1))
		self._setc(self.NOT1_Uin, (((self._last(self.NOT1_Uin)<=self._last(self.NOT1_VCC)/2)+(self._last(self.NOT2_Uin)<=self._last(self.NOT2_VCC)/2)*(1000*(1e-06*self._der1(self.C1_U))))*5-1000*(1e-06*self._der0(self.C1_U)))/((1e-06*self._der1(self.C1_U))*1000+1))
		self._setc(self.R1_U, (((self._last(self.NOT1_Uin)<=self._last(self.NOT1_VCC)/2)*(1000*(1e-06*self._der1(self.C1_U)))-(self._last(self.NOT2_Uin)<=self._last(self.NOT2_VCC)/2)*(1000*(1e-06*self._der1(self.C1_U))))*5+1000*(1e-06*self._der0(self.C1_U)))/(1+1000*(1e-06*self._der1(self.C1_U))))
		self._setc(self.NOT2_Uin, (((self._last(self.NOT1_Uin)<=self._last(self.NOT1_VCC)/2)+(self._last(self.NOT1_Uin)<=self._last(self.NOT1_VCC)/2)*(1000*(1e-06*self._der1(self.C1_U))))*5)/(1000*(1e-06*self._der1(self.C1_U))+1))
		self._setc(self.NOT1_VCC, ((1+1000*(1e-06*self._der1(self.C1_U)))*5)/(1000*(1e-06*self._der1(self.C1_U))+1))
		self._setc(self.NOT1_Uout, (((self._last(self.NOT1_Uin)<=self._last(self.NOT1_VCC)/2)+(self._last(self.NOT1_Uin)<=self._last(self.NOT1_VCC)/2)*(1000*(1e-06*self._der1(self.C1_U))))*5)/(1000*(1e-06*self._der1(self.C1_U))+1))
		self._setc(self.V1_U, ((1+1000*(1e-06*self._der1(self.C1_U)))*5)/(1+1000*(1e-06*self._der1(self.C1_U))))

